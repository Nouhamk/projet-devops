name: Deploy TrapUrCrap to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: 

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  RESOURCE_GROUP: rg-trapurcrap-prod
  BACKEND_IMAGE: trapurcrap-backend
  FRONTEND_IMAGE: trapurcrap-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Checkout du code
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Connexion Ã  Azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Create ACR if not exists
      run: |
        ACR_EXISTS=$(az acr list --resource-group rg-trapurcrap-prod --query "[?name=='${{ secrets.ACR_NAME }}']" --output tsv)
        if [ -z "$ACR_EXISTS" ]; then
          echo "Creating ACR ${{ secrets.ACR_NAME }}"
          az acr create --resource-group rg-trapurcrap-prod \
            --name ${{ secrets.ACR_NAME }} \
            --sku Basic \
            --admin-enabled
        else
          echo "ACR ${{ secrets.ACR_NAME }} already exists"
        fi

    # 3. Connexion Ã  Azure Container Registry
    - name: Login to ACR
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}

    # 4. Build et Push Backend
    - name: Build and Push Backend
      run: |
        cd backend
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:latest .
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE }}:latest

    # 5. Build et Push Frontend
    - name: Build and Push Frontend
      run: |
        cd frontend
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:latest .
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE }}:latest

    # 6. Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    # 7. Terraform Init
    - name: Terraform Init
      run: |
        terraform init
      working-directory: ./terraform

    # 8. Terraform Plan
    - name: Terraform Plan
      run: |
        terraform plan -out=tfplan
      working-directory: ./terraform
      env:
        TF_VAR_mongo_uri: ${{ secrets.MONGO_URI }}
        TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
        TF_VAR_stripe_secret_key: ${{ secrets.STRIPE_SECRET_KEY }}
        TF_VAR_smtp_user: ${{ secrets.SMTP_USER }}
        TF_VAR_smtp_pass: ${{ secrets.SMTP_PASS }}

    # 9. Terraform Apply (seulement sur main)
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        terraform apply -auto-approve tfplan
      working-directory: ./terraform
      env:
        TF_VAR_mongo_uri: ${{ secrets.MONGO_URI }}
        TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
        TF_VAR_stripe_secret_key: ${{ secrets.STRIPE_SECRET_KEY }}
        TF_VAR_smtp_user: ${{ secrets.SMTP_USER }}
        TF_VAR_smtp_pass: ${{ secrets.SMTP_PASS }}

    # 10. RedÃ©marrer les containers
    - name: Restart Containers
      if: github.ref == 'refs/heads/main'
      run: |
        az container restart --name trapurcrap-backend --resource-group ${{ env.RESOURCE_GROUP }} || true
        az container restart --name trapurcrap-frontend --resource-group ${{ env.RESOURCE_GROUP }} || true

    # 11. Afficher les URLs
    - name: Show URLs
      if: github.ref == 'refs/heads/main'
      run: |
        echo "ðŸŽ‰ Deployment completed!"
        echo "Frontend URL: http://trapurcrap-frontend.francecentral.azurecontainer.io:8080"
        echo "Backend URL: http://trapurcrap-backend.francecentral.azurecontainer.io:5000"
        echo "Health Check: http://trapurcrap-backend.francecentral.azurecontainer.io:5000/health"